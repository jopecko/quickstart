name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main

# Cancel in-progress jobs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # https://github.com/actions-ecosystem/action-regex-match
      - name: Regex test commit message
        uses: actions-ecosystem/action-regex-match@v2
        if: github.event_name != 'pull_request'
        id: regex-match
        with:
          text: ${{ github.event.head_commit.message }}
          regex: '#(major|minor|patch|none)'

      - name: Validate commit message
        if: github.event_name != 'pull_request'
        run: |
          if [ -z "${{ steps.regex-match.outputs.match }}" ]; then
            echo "Commit message must follow the regex: ${{ steps.regex-match.inputs.regex }}"
            exit 1
          fi

      # https://github.com/marketplace/actions/github-tag-bump
      - name: Bump version and push tag
        id: tag
        if: github.event_name != 'pull_request'
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: none

      - name: PR Git SHA
        shell: bash
        run: echo "sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
        id: pr-sha

      - run: |
          FROM_ACTION=${{ steps.tag.outputs.tag }}
          FROM_SBT=$(sbt --no-colors --error 'print version; print ThisBuild / version' | tail -n 1 | tr -d '[:space:]')
          echo "FROM_ACTION=$FROM_ACTION"
          echo "FROM_SBT=$FROM_SBT"
          TAG=$FROM_ACTION:-$FROM_SBT}
          echo "TAG=$TAG"

          echo "tag=${FROM_ACTION:-$FROM_SBT}" >> $GITHUB_OUTPUT
        id: yolo

      - name: actual-version
        shell: bash
        run: |
          GIT_SHA=${{ github.event.pull_request.head.sha }}
          SHORT_SHA=${GIT_SHA:0:8}
          VERSION=${{ steps.tag.outputs.new_tag }}
          echo "tag=${VERSION:-$SHORT_SHA}" >> $GITHUB_OUTPUT
        id: docker-tag

      - run: |
          echo ${{ steps.pr-sha.outputs.sha }}
          echo ${{ steps.tag.outputs.new_tag }}
          echo [ -z "${{ steps.tag.outputs.new_tag }}" ] && echo "Empty"
          echo ${{ steps.docker-tag.outputs.tag }}
          echo "The docker tag to use is ${{ steps.docker-tag.outputs.tag }}"
          echo ${{ steps.yolo.outputs.tag }}

      - name: publish to ECR
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "Placeholder for push to ECR"
          sbt 'show ThisBuild / version'
          echo [ -z "${{ steps.tag.outputs.new_tag }}" ] && echo "Empty"
          echo ${{ steps.tag.outputs.new_tag }}
          echo ${{ steps.tag.outputs.new_tag == '' }}
          echo ${{ steps.tag.outputs.part }}
          echo ${{ steps.tag.outputs.tag }}
          echo ${{ steps.tag.outputs.part == 'none' }}
          echo ${{ steps.regex-match.outputs.match }}
          echo ${{ steps.regex-match.outputs.match == '#none'}}
